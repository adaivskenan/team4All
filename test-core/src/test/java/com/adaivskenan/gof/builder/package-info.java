/**============================================================
 * 版权： 久其软件 版权所有 (c) 2002 - 2016
 * 包： com.adaivskenan.gof.builder
 * 修改记录：
 * 日期                作者           内容
 * =============================================================
 * 2018年1月31日       qinjunjie        
 * ============================================================*/

/**
 * <p>BUILDER 建造者模式</p>
 * 将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有
 * 不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客
 * 户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建
 * 造过程。
 *
 * <p>Copyright: 版权所有 (c) 2002 - 2016<br>
 * Company: 久其</p>
 *
 * @author qinjunjie
 * @version 2018年1月31日
 */

package com.adaivskenan.gof.builder;

/**
 * 	建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可 
 * 以创建不同的表示。建造者模式是一种对象创建型模式。
 *
 * 在建造者模式结构图中包含如下几个角色：
 * 
 * 	Builder（抽象建造者）：它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一
 * 般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是
 * getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。
 * 
 * 	ConcreteBuilder（具体建造者）：它实现了Builder接口，实现各个部件的具体构造和装配方法，
 * 定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。
 * 
 * 	Product（产品角色）：它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示
 * 并定义它的装配过程。
 * 
 * 	Director（指挥者）：指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之
 * 间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对
 * 象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象
 * （也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者
 * 类中。
 * 
 * ActorController充当指挥者，ActorBuilder充当抽象建造者，
 * HeroBuilder、AngelBuilder和DevilBuilder充当具体建造者，Actor充当复杂产品
 *
 */