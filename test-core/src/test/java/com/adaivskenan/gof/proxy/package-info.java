/**============================================================
 * 版权： 久其软件 版权所有 (c) 2002 - 2016
 * 包： com.adaivskenan.gof.proxy
 * 修改记录：
 * 日期                作者           内容
 * =============================================================
 * 2018年1月31日       qinjunjie        
 * ============================================================*/

/**
 * <p>PROXY</p>
 *	代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对
 *源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行
 *动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客
 *户和目标对象直接起到中介的作用。客户端分辨不出代理主题对象与真实主题
 *对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象
 *的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其
 *他角色代为创建并传入。
 * <p>Copyright: 版权所有 (c) 2002 - 2016<br>
 * Company: 久其</p>
 *
 * @author qinjunjie
 * @version 2018年1月31日
 */

package com.adaivskenan.gof.proxy;

/**
 * PROXY—跟MM在网上聊天，一开头总是“hi,你好”,“你从哪儿来呀？”“你多大
 * 了？”“身高多少呀？”这些话，真烦人，写个程序做为我的Proxy吧，凡是接
 * 收到这些话都设置好了自动的回答，接收到其他的话时再通知我回答，怎么
 * 样，酷吧。
 */

/////////代理模式与AOP

/**
 * 
 * 		AOP（Aspect Orient Programming），我们一般称为面向方面（切面）
 * 编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注
 * 点，比如事务管理、日志、缓存等等。AOP实现的关键在于AOP框架自动创建的
 * AOP代理，AOP代理主要分为静态代理和动态代理，静态代理的代表为AspectJ；
 * 而动态代理则以Spring AOP为代表。
 * =================================================================
 * 	AspectJ:
 * 		AspectJ是静态代理的增强，所谓的静态代理就是AOP框架会在编译阶段生成
 * AOP代理类，因此也称为编译时增强。
 * 
 * Spring AOP：
 * 	Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节
 * 码，而是在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象
 * 的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。
 *  	Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。
 * JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。
 * JDK动态代理的核心是InvocationHandler接口和Proxy类。
 *  	如果目标类没有实现接口，Spring AOP会选择使用CGLIB来动态代理目标类。
 * CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时
 * 动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此
 * 如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。
 * */