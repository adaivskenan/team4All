/**============================================================
 * 版权： 久其软件 版权所有 (c) 2002 - 2016
 * 包： com.adaivskenan.gof.observer
 * 修改记录：
 * 日期                作者           内容
 * =============================================================
 * 2018年1月31日       qinjunjie        
 * ============================================================*/

/**
 * <p>OBSERVER</p>
 *	观察者模式：观察者模式定义了一种一对多的依赖关系，让多个观察者
 *	对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知
 *	所有观察者对象，使他们能够自动更新自己。
 * <p>Copyright: 版权所有 (c) 2002 - 2016<br>
 * Company: 久其</p>
 *
 * @author qinjunjie
 * @version 2018年1月31日
 */

package com.adaivskenan.gof.observer;

/**
 *观察者模式又叫
 *	发布/订阅(publish/subscribe)模式、
 *	模型/视图(Model/View)模式、
 *	源/监听器(Source/Listener)模式
 *	从属者(Dependents)模式
 *
 *	抽象主题角色：
 *		抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList）
 *		里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和
 *		删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。
 *	
 *	抽象观察者角色：
 *		为所有具体的观察者定义一个接口，在得到主题的通知时更新自己。
 *
 *	具体主题角色：
 *		将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登
 *		记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)
 *		角色。
 *
 *	具体观察者角色：
 *		该角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态
 *		相协调。如果需要，具体观察者角色可以保存一个指向具体主题角色的引用。
 */